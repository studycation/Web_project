1. 라우팅 설정
/page로 이동하면 이동할 수 있도록 설정
1.1. npm install react-router-dom 설치
1.2. routes.tsx에 import { createBrowserRouter } from "react-router-dom"; 
1.3. createBrowserRouter로 각각 페이지 끌어오고, /페이지로 경로 지정. 
1.4. 각각 페이지는 적어도 하나의 함수가 있어야 함. 

* 주의할 점 : 프로젝트/FE 안에 만들지 말고, 지금 만드는 폴더를 FE 기준으로 만들것.

2. UI 따오기
2.1. 헤더 커스텀 및 적용 완료
2.1.2. 홈 페이지 커스텀 완료


3. start 버튼 누르면 로그인 페이지로 이동하고 지금은 로그인 버튼을 누르면 창작자 홈페이지에 들어갈 수 있는 기능까지 구현

3.1. usenavigate 훅 사용하기
3.2. 하나의 버튼 : 하나의 함수를 선언해서 button 옆에 onClick으로 연결해주기
3.3. 여러 개 버튼 : 하나의 함수에 경로만 전달해서 처리함. (pick)
ex. export default function Header() {
  const navigate = useNavigate();
  const handleNavigation = (path: string) => {
    navigate(path);
  };
  return (
    <div className={styles.wrapper}>
      <div className={styles.banner}></div>
      <div className={styles.title} onClick={() => handleNavigation("/home")}>
        SUGAR TOWN
      </div>
      <div className={styles.icon}></div>
    </div>
  );
} (Header.tsx)
3.4. 로그인 버튼 후 창작자 홈페이지 index로 이동.
3.5. 효율적인 모듈 관리를 위해 컴포넌트 관리를 시험.
Profile_Button: index의 게시판 내소개 방명록 다이어리를 Profile_Button.module.scss에서 공통 스타일 적용 후 오버라이딩 사용.
3.6. index의 화면 설정
index부터는 독립적인 컴포넌트 관리에 익숙해짐을 위해 페이지 레이아웃을 공통적으로 관리함.
버튼을 누르면 각각 페이지로 이동할 수 있게끔 구현
3.7. 프로필 버튼을 누르고, 미니홈피 화면 프레임 UI 끌어오기. 버튼을 누르면 내부 기능 이동 네비게이션 완료.
피그마에서 위치 따오고, 그 위치는 div 클래스 내에서 달라질 수 있음. 상대 위치 고려.
앞에 페이지 분별할 수 있도록 타이틀 모듈 생성 후 연결.
다음에는 페이지 클릭 시 버튼 색깔 바뀌도록 구현해보겠음.

3.8. 프로필 수정 페이지 생성.

3.9. 공통 버튼을 만들고 (CommonBtn) 부모-자식 선언으로 속성을 변경할 수 있도록 함.
Common_Button.tsx에 props로 감싸주어 이걸 import만 하면 어디서든지 수정할 수 있도록 작성.
<CommonBtn>프로필 수정</CommonBtn> 가능!

4.0. 게임 리스트 페이지 생성 및 구현. 
4.1. 소셜 계정 연동 완료.
